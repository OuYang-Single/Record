package com.mmt.record.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mmt.record.mvp.model.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property PassWord = new Property(3, String.class, "passWord", false, "PASS_WORD");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Question = new Property(6, String.class, "question", false, "QUESTION");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Answer = new Property(8, String.class, "answer", false, "ANSWER");
        public final static Property ExpireTime = new Property(9, long.class, "expireTime", false, "EXPIRE_TIME");
        public final static Property Role = new Property(10, Integer.class, "role", false, "ROLE");
        public final static Property CreateTime = new Property(11, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(12, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Token = new Property(13, String.class, "token", false, "TOKEN");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASS_WORD\" TEXT," + // 3: passWord
                "\"EMAIL\" TEXT," + // 4: email
                "\"PHONE\" TEXT," + // 5: phone
                "\"QUESTION\" TEXT," + // 6: question
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"ANSWER\" TEXT," + // 8: answer
                "\"EXPIRE_TIME\" INTEGER NOT NULL ," + // 9: expireTime
                "\"ROLE\" INTEGER," + // 10: role
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 11: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 12: updateTime
                "\"TOKEN\" TEXT);"); // 13: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(7, question);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(9, answer);
        }
        stmt.bindLong(10, entity.getExpireTime());
 
        Integer role = entity.getRole();
        if (role != null) {
            stmt.bindLong(11, role);
        }
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getUpdateTime());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(7, question);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(9, answer);
        }
        stmt.bindLong(10, entity.getExpireTime());
 
        Integer role = entity.getRole();
        if (role != null) {
            stmt.bindLong(11, role);
        }
        stmt.bindLong(12, entity.getCreateTime());
        stmt.bindLong(13, entity.getUpdateTime());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passWord
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // question
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // answer
            cursor.getLong(offset + 9), // expireTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // role
            cursor.getLong(offset + 11), // createTime
            cursor.getLong(offset + 12), // updateTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassWord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswer(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExpireTime(cursor.getLong(offset + 9));
        entity.setRole(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCreateTime(cursor.getLong(offset + 11));
        entity.setUpdateTime(cursor.getLong(offset + 12));
        entity.setToken(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
