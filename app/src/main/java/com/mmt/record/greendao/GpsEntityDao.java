package com.mmt.record.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mmt.record.mvp.model.entity.FileEntity;
import com.mmt.record.mvp.model.entity.FolderEntity;

import com.mmt.record.mvp.model.entity.GpsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GPS_ENTITY".
*/
public class GpsEntityDao extends AbstractDao<GpsEntity, Long> {

    public static final String TABLENAME = "GPS_ENTITY";

    /**
     * Properties of entity GpsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Device_id = new Property(1, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property Speed = new Property(4, float.class, "speed", false, "SPEED");
        public final static Property Heading = new Property(5, float.class, "heading", false, "HEADING");
        public final static Property Gps_time = new Property(6, long.class, "gps_time", false, "GPS_TIME");
        public final static Property Upload = new Property(7, boolean.class, "upload", false, "UPLOAD");
        public final static Property FileEntityId = new Property(8, Long.class, "fileEntityId", false, "FILE_ENTITY_ID");
        public final static Property FolderEntityId = new Property(9, Long.class, "folderEntityId", false, "FOLDER_ENTITY_ID");
    }

    private DaoSession daoSession;


    public GpsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GpsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GPS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: device_id
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"SPEED\" REAL NOT NULL ," + // 4: speed
                "\"HEADING\" REAL NOT NULL ," + // 5: heading
                "\"GPS_TIME\" INTEGER NOT NULL ," + // 6: gps_time
                "\"UPLOAD\" INTEGER NOT NULL ," + // 7: upload
                "\"FILE_ENTITY_ID\" INTEGER," + // 8: fileEntityId
                "\"FOLDER_ENTITY_ID\" INTEGER);"); // 9: folderEntityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GPS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GpsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(2, device_id);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getHeading());
        stmt.bindLong(7, entity.getGps_time());
        stmt.bindLong(8, entity.getUpload() ? 1L: 0L);
 
        Long fileEntityId = entity.getFileEntityId();
        if (fileEntityId != null) {
            stmt.bindLong(9, fileEntityId);
        }
 
        Long folderEntityId = entity.getFolderEntityId();
        if (folderEntityId != null) {
            stmt.bindLong(10, folderEntityId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GpsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(2, device_id);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getSpeed());
        stmt.bindDouble(6, entity.getHeading());
        stmt.bindLong(7, entity.getGps_time());
        stmt.bindLong(8, entity.getUpload() ? 1L: 0L);
 
        Long fileEntityId = entity.getFileEntityId();
        if (fileEntityId != null) {
            stmt.bindLong(9, fileEntityId);
        }
 
        Long folderEntityId = entity.getFolderEntityId();
        if (folderEntityId != null) {
            stmt.bindLong(10, folderEntityId);
        }
    }

    @Override
    protected final void attachEntity(GpsEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GpsEntity readEntity(Cursor cursor, int offset) {
        GpsEntity entity = new GpsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_id
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.getFloat(offset + 4), // speed
            cursor.getFloat(offset + 5), // heading
            cursor.getLong(offset + 6), // gps_time
            cursor.getShort(offset + 7) != 0, // upload
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // fileEntityId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // folderEntityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GpsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevice_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setSpeed(cursor.getFloat(offset + 4));
        entity.setHeading(cursor.getFloat(offset + 5));
        entity.setGps_time(cursor.getLong(offset + 6));
        entity.setUpload(cursor.getShort(offset + 7) != 0);
        entity.setFileEntityId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setFolderEntityId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GpsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GpsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GpsEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFileEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFolderEntityDao().getAllColumns());
            builder.append(" FROM GPS_ENTITY T");
            builder.append(" LEFT JOIN FILE_ENTITY T0 ON T.\"FILE_ENTITY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN FOLDER_ENTITY T1 ON T.\"FOLDER_ENTITY_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GpsEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        GpsEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FileEntity mFileEntity = loadCurrentOther(daoSession.getFileEntityDao(), cursor, offset);
        entity.setMFileEntity(mFileEntity);
        offset += daoSession.getFileEntityDao().getAllColumns().length;

        FolderEntity folderEntity = loadCurrentOther(daoSession.getFolderEntityDao(), cursor, offset);
        entity.setFolderEntity(folderEntity);

        return entity;    
    }

    public GpsEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GpsEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GpsEntity> list = new ArrayList<GpsEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GpsEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GpsEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
