package com.mmt.record.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.mmt.record.mvp.model.entity.FolderEntity;
import com.mmt.record.mvp.model.entity.GpsEntity;

import com.mmt.record.mvp.model.entity.FileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_ENTITY".
*/
public class FileEntityDao extends AbstractDao<FileEntity, Long> {

    public static final String TABLENAME = "FILE_ENTITY";

    /**
     * Properties of entity FileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property FolderEntityId = new Property(2, Long.class, "folderEntityId", false, "FOLDER_ENTITY_ID");
        public final static Property GpsEntityId = new Property(3, Long.class, "gpsEntityId", false, "GPS_ENTITY_ID");
        public final static Property AddTime = new Property(4, long.class, "addTime", false, "ADD_TIME");
        public final static Property Upload = new Property(5, boolean.class, "upload", false, "UPLOAD");
        public final static Property FolderId = new Property(6, Long.class, "folderId", false, "FOLDER_ID");
    }

    private DaoSession daoSession;

    private Query<FileEntity> folderEntity_FileEntitiesQuery;

    public FileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"FOLDER_ENTITY_ID\" INTEGER," + // 2: folderEntityId
                "\"GPS_ENTITY_ID\" INTEGER," + // 3: gpsEntityId
                "\"ADD_TIME\" INTEGER NOT NULL ," + // 4: addTime
                "\"UPLOAD\" INTEGER NOT NULL ," + // 5: upload
                "\"FOLDER_ID\" INTEGER NOT NULL );"); // 6: folderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        Long folderEntityId = entity.getFolderEntityId();
        if (folderEntityId != null) {
            stmt.bindLong(3, folderEntityId);
        }
 
        Long gpsEntityId = entity.getGpsEntityId();
        if (gpsEntityId != null) {
            stmt.bindLong(4, gpsEntityId);
        }
        stmt.bindLong(5, entity.getAddTime());
        stmt.bindLong(6, entity.getUpload() ? 1L: 0L);
        stmt.bindLong(7, entity.getFolderId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        Long folderEntityId = entity.getFolderEntityId();
        if (folderEntityId != null) {
            stmt.bindLong(3, folderEntityId);
        }
 
        Long gpsEntityId = entity.getGpsEntityId();
        if (gpsEntityId != null) {
            stmt.bindLong(4, gpsEntityId);
        }
        stmt.bindLong(5, entity.getAddTime());
        stmt.bindLong(6, entity.getUpload() ? 1L: 0L);
        stmt.bindLong(7, entity.getFolderId());
    }

    @Override
    protected final void attachEntity(FileEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileEntity readEntity(Cursor cursor, int offset) {
        FileEntity entity = new FileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // folderEntityId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // gpsEntityId
            cursor.getLong(offset + 4), // addTime
            cursor.getShort(offset + 5) != 0, // upload
            cursor.getLong(offset + 6) // folderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFolderEntityId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGpsEntityId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setAddTime(cursor.getLong(offset + 4));
        entity.setUpload(cursor.getShort(offset + 5) != 0);
        entity.setFolderId(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fileEntities" to-many relationship of FolderEntity. */
    public List<FileEntity> _queryFolderEntity_FileEntities(Long folderId) {
        synchronized (this) {
            if (folderEntity_FileEntitiesQuery == null) {
                QueryBuilder<FileEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FolderId.eq(null));
                folderEntity_FileEntitiesQuery = queryBuilder.build();
            }
        }
        Query<FileEntity> query = folderEntity_FileEntitiesQuery.forCurrentThread();
        query.setParameter(0, folderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFolderEntityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGpsEntityDao().getAllColumns());
            builder.append(" FROM FILE_ENTITY T");
            builder.append(" LEFT JOIN FOLDER_ENTITY T0 ON T.\"FOLDER_ENTITY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN GPS_ENTITY T1 ON T.\"GPS_ENTITY_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FileEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        FileEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FolderEntity folderEntity = loadCurrentOther(daoSession.getFolderEntityDao(), cursor, offset);
        entity.setFolderEntity(folderEntity);
        offset += daoSession.getFolderEntityDao().getAllColumns().length;

        GpsEntity gpsEntity = loadCurrentOther(daoSession.getGpsEntityDao(), cursor, offset);
        entity.setGpsEntity(gpsEntity);

        return entity;    
    }

    public FileEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FileEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FileEntity> list = new ArrayList<FileEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FileEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FileEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
